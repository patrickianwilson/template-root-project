/*
This requires the following project extensions

project.ext {
	dockerImagePath="us.gcr.io/project-id/custom/path"
}
 */

task prepDeploy << {
	def imageId = ""

	if (project.hasProperty("imageId")) {
		imageId = project.ext.imageId;
	}

	def serviceYamlFileTemplate = project.ext.serviceYamlFileTemplate

	String templateTxt = file(serviceYamlFileTemplate).text

	templateTxt = templateTxt.replaceAll('%imageId%', project.ext.dockerImagePath);

	file("$projectDir/build/kube").mkdirs()

	def serviceFile = file("$projectDir/build/kube/service.yaml");
	serviceFile.text = templateTxt;
}



task tagImageForPush (type: Exec, dependsOn: "assembleDockerImage") {
	workingDir "$projectDir"
	commandLine 'docker', 'tag', "${-> project.ext.imageId}", project.ext.dockerImagePath

	inputs.file project.dockerFile
	inputs.dir project.dockerWorkingDir

}

task pushImage (type: Exec, dependsOn: "tagImageForPush") {
	workingDir "$projectDir"
	commandLine 'gcloud','docker', '--' ,'push', project.ext.dockerImagePath

	inputs.file project.dockerFile
	inputs.dir project.dockerWorkingDir

}

task deploy (type: Exec, dependsOn: ["pushImage", "prepDeploy"]) {
	workingDir "$projectDir"
	commandLine 'kubectl','apply', '-f', "$buildDir/kube/service.yaml"

	inputs.file project.dockerFile
	inputs.dir project.dockerWorkingDir

}


prepDeploy.dependsOn assembleDockerImage