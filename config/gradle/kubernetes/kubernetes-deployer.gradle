/*
This requires the following project extensions

project.ext {
	dockerImagePath="us.gcr.io/project-id/custom/path"
}
 */

task prepDeploy << {

	def serviceYamlFileTemplate = project.ext.serviceYamlFileTemplate

	String templateTxt = file(serviceYamlFileTemplate).text

	templateTxt = templateTxt.replaceAll('%imageId%', project.ext.dockerImagePath);

	file("$projectDir/build/kube").mkdirs()

	def serviceFile = file("$projectDir/build/kube/service.yaml");
	serviceFile.text = templateTxt;
}

task pushImage (type: Exec, dependsOn: "assembleDockerImage") {
	workingDir "$projectDir"
	commandLine 'gcloud','docker', '--' ,'push', project.ext.dockerImagePath

	inputs.file project.dockerFile
	inputs.dir project.dockerWorkingDir

}

task deploy (type: Exec, dependsOn: ["pushImage", "prepDeploy"]) {
	workingDir "$projectDir"
	commandLine 'kubectl','apply', '-f', "$buildDir/kube/service.yaml"

	inputs.file project.dockerFile
	inputs.dir project.dockerWorkingDir

}


prepDeploy.dependsOn assembleDockerImage
